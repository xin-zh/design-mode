原型模式  用于创建复杂重复的对象，同时还可以保证性能。当创建对象的代价较大时可以考虑这种设计模式，使用的是拷贝的原理

实现一个原型接口，该接口用于创建当前对象的拷贝

主要解决在运行器频繁的建立和删除对象

使用场景：
    1.动态装载【在对象使用时创建】
    2.当一个系统应该独立于它的产品创建，构成和表示时
    3.为了避免创建一个与产品类层次平行的工厂类层次时
    4.当一个类的实例只能有几个不同状态组合中的一种时

优点：
    1.性能提高
    2.逃避构造函数的约束

使用场景：
    1.资源优化场景
    2.类的初始化需要消耗很多资源
    3.性能和安全要求的场景
    4.通过new一个对象需要权限或很多资源的时候，可使用原型模式
    5.一个对象对应多个修改者的场景
    6.结合工厂模式，通过clone一个对象，由工厂提供给调用方


实现：
    1.实现克隆操作，在Java集成Cloneable接口，重写clone方法

底层：
    1.原型模式拷贝是在堆内存中直接拷贝现有的二进制对象，重新分配一个内存块
    2.new方式创建对象,JVM要走一遍类加载流程，类加载的过程中调用构造函数，最后会将生成的对象放在堆中